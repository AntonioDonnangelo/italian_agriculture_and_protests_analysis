from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import csv
import time
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
import requests

target_url = 'https://www.europarl.europa.eu/plenary/en/minutes.html'
query = 'green deal' #done
# query = 'agriculture'#done
# query = 'common agricultural policy' #done
# query = 'CAP' #done
# query = 'precision agriculture' #done
# query = 'pesticides' #done
# query = 'agribusiness' #done
# query = 'farming' #done
# query = 'sustainability' #done
# query = 'water crisis' #done
# query = 'drought' #done
# query = 'agrochemicals' #done
# query = 'biodynamic' #done


# opzioni per driver  che simulano comportamento umano
options = webdriver.ChromeOptions()
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option("useAutomationExtension", False)
driver = webdriver.Chrome(options=options)

# apro la pagina
driver.get(target_url)

# gestione pop-up cookies

cookie_popup = WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, '//*[@id="cookie-policy"]/div/div[2]/button[1]')))
time.sleep(5)
cookie_button = driver.find_element(By.XPATH, '//*[@id="cookie-policy"]/div/div[2]/button[1]')
cookie_button.click()

# cerco la barra per la query
bar = driver.find_element(By.ID, 'criteriaSidesMiText')
# inserisco la query, seleziono il bottone di invio e clicco
search = bar.send_keys(query)
enter_button = driver.find_element(By.ID, 'sidesButtonSubmit')
enter_button.click()

# identifico i risultati della query e li inserisco tutti in una lista per poi facilitare l'iterazione

results = []

while True:
    # prendi tutti i titoli della pagina corrente
    title_elements = driver.find_elements(By.CLASS_NAME, "title a")
    results += [(title_element.text, title_element.get_attribute('href')) for title_element in title_elements]

    try:
        # clicca su 'next page'
        next_page = driver.find_element(By.CSS_SELECTOR, '.next_page')
        next_page.click()

        # attendi che la pagina si carichi
        WebDriverWait(driver, 10).until(EC.staleness_of(title_elements[0]))

    except:
        # una volta finito, blocca il ciclo e vai avanti
        break

# print(results)
print('Accessing the for loop')


for report, report_url in results:
            # prova: trova il link per andare sulla pagina e clicca
    try:
        driver.get(report_url)
        print('Fetching report:', report)

        # aspetta che la pagina si carichi fino a che non si carica l'elemento che voglio trovare 'verbatim reports'

        wait = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, 'td.switch_button_pv_cre a[href]'))
                        )
        # trova l'elemento 'verbatim reports e clicca'
        new_page = driver.find_element(By.CSS_SELECTOR, 'td.switch_button_pv_cre a')

        print('Element was successfully found. Clicking on it...')

        xml_url = new_page.get_attribute('href')

        print('XML located')

        xml_content = requests.get(xml_url).text

        filename = f"{report}.xml"  # You can customize the filename here

        with open(filename, "w", encoding="utf-8") as file:
            file.write(xml_content)
            print(f"XML document '{filename}' downloaded successfully.")

                    # except: se non  trovi l'elemento, dimmi quale Ã¨ il problema e continua
    except Exception as e:

        print("Error:", str(e))


driver.quit()
